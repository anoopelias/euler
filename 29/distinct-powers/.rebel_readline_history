1602200782169:clojure.math.numeric-tower :as math
1602200793566:(require '[clojure.math.numeric-tower :as math])
1602200801389:(math/expt 4 2)
1602200832809:(range 10)
1602200837432:(range 2 5)
1602200847786:(def max 5)
1602200851675:(range 2 max)
1602200862797:(range 2 (inc max))
1602201046913:(let [nums (range 2 (inc max))])
1602201064834:(let [nums (range 2 (inc max))] nums)
1602201100608:(let [nums (range 2 (inc max))] (for [x nums y nums] (vector x y)))
1602201200205:(def combinations\n  (let [nums (range 2 (inc max))]\n    (for [x nums y nums] (vector x y))))
1602201212012:mx
1602201213666:max
1602201217021:combinations
1602201306926:(map #(math/expt (% 0) (% 1)) combinations)
1602201348137:(count (map #(math/expt (% 0) (% 1)) combinations)
1602201354713:(count (map #(math/expt (% 0) (% 1)) combinations))
1602201367676:(count (set (map #(math/expt (% 0) (% 1)) combinations)))
1602201441831:(def cnt\n  (count (set (map\n                #(math/expt (% 0) (% 1))\n                combinations)))
1602201455953:(def cnt\n  (count (set (map\n                #(math/expt (% 0) (% 1))\n                combinations))))
1602201458562:cnt
1602201657499:(def max-num 100)
1602201665753:(def combinations\n  (let [nums (range 2 (inc max-num))]\n    (for [x nums y nums] (vector x y))))
1602201669248:combinations
