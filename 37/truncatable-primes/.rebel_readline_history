1602469605692:(Math/sqrt 9)
1602469615218:(Math/floor (Math/sqrt 9))
1602469621420:(Math/floor (Math/sqrt 10))
1602469652023:(int (Math/sqrt 10))
1602469657308:(int (Math/sqrt 9))
1602469660246:(int (Math/sqrt 8))
1602469675195:(def n 10)
1602469678112:(int (Math/sqrt n))
1602469701026:(range (int (Math/sqrt n)))
1602469732073:(mod n, 3)
1602469735351:(mod n 2)
1602469742423:(mod n 6)
1602469861464:(map #((= (mod n %) 0) (range (int (Math/sqrt n)))
1602469875685:(map #((= (mod n %) 0)) (range (int (Math/sqrt n)))
1602469890997:(map #(= (mod n %) 0) (range (int (Math/sqrt n)))
1602470010741:(= (mod n 6) 0)
1602470029183:(map #(= (mod n %) 0) (range (int (Math/sqrt n))))
1602470071867:(map #(= (mod n %) 0) (range 2 (int (Math/sqrt n))))
1602470082245:n
1602470100944:(range 2 (int (Math/sqrt n)))
1602471468064:(def n 50)
1602471474414:(map #(= (mod n %) 0) (range (int (Math/sqrt n)))
1602471478210:(map #(= (mod n %) 0) (range (int (Math/sqrt n))))
1602471483928:(map #(= (mod n %) 0) (range 2 (int (Math/sqrt n))))
1602471497659:(filter #(= (mod n %) 0) (range 2 (int (Math/sqrt n))))
1602471517936:(= (len (filter #(= (mod n %) 0) (range 2 (int (Math/sqrt n)))) 0)
1602471521966:(= (len (filter #(= (mod n %) 0) (range 2 (int (Math/sqrt n)))) 0))
1602471555163:(= (count (filter #(= (mod n %) 0) (range 2 (int (Math/sqrt n)))) 0))
1602471679060:(defn is-prime [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2 (int (Math/sqrt n)))))\n     0))
1602471685701:(is-prime 10)
1602471689410:(is-prime 2)
1602471692200:(is-prime 3)
1602471694645:(is-prime 4)
1602471713840:(map is-prime (range 2 20))
1602471730083:(is-prime 4)
1602471749372:(filter #(= (mod n %) 0) (range 2 (int (Math/sqrt n))))
1602471763238:(def n 4)
1602471788548:(int (Math/sqrt n))
1602471805050:(range 2 (int (Math/sqrt n)))
1602471814307:(range 2 2)
1602471832660:(range 2 (int (Math/ceil (Math/sqrt n))))
1602471843008:(range 2 3)
1602471957736:(range 2 (int (int (Math/sqrt n))))
1602471964399:(range 2 (inc (int (Math/sqrt n))))
1602472004345:(defn is-prime [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2 (int (Math/sqrt n)))))\n     0))
1602472543054:(map is-prime (range 2 20))
1602472562192:(defn is-prime [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))
1602472619031:(map #('(% (is-prime %))) (range 2 20))
1602472655823:(list 1 2)
1602472675459:(map #(list % (is-prime %))) (range 2 20))
1602472694967:(map #(list % (is-prime %))) (range 2 5))
1602472727550:(is-prime 4)
1602472754256:(map #(list % (is-prime %)) (range 2 5))
1602472760085:(map #(list % (is-prime %)) (range 2 20))
1602472773947:(map #(list % (is-prime %)) (range 2 200))
1602472839620:n
1602472847101:(def n 156)
1602472892609:(range 1 30)
1602473071349:(map () (range 1 30)
1602473075112:(defn is-prime [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))
1602473139953:(:require [clojure.math.numeric-tower :as math])
1602473146971:(:require [clojure.math.numeric-tower])
1602473161425:(:require [clojure.contrib.math])
1602473174028:(:require 'clojure.math.numeric-tower)
1602473180496:(require 'clojure.math.numeric-tower)
1602473193245:(require 'clojure.contrib.math)
1602473207974:(:require 'clojure.math.numeric-tower :as math)
1602473580734:(:require 'clojure.math.numeric-tower)
1602473596785:(ns distinct-powers.core\n  (:gen-class)\n  (:require [clojure.math.numeric-tower :as math]))
1602473722809:(:require [clojure.math.numeric-tower :as math])
1602473765867:(ns truncatable-primes.core\n  (:gen-class)\n  (:require [clojure.math.numeric-tower :as math]))
1602473777163:(math/expt 10 2)
1602473823685:(map #(math/expt 10 %) (range 0 30)
1602473840507:(map #(math/expt 10 %) (range 0 30))
1602473850855:(map #(math/expt 10 %) (range 0 20))
1602474094323:(defn positive-numbers \n	([] (positive-numbers 1))\n	([n] (lazy-seq (cons n (positive-numbers (inc n))))))
1602474112953:(take 5 positive-numbers)
1602474127930:(take 5 (positive-numbers))
1602475538370:(defn powers-of-10 \n	([] (powers-of-10 1))\n	([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))
1602475550386:(take 5 (powers-of-10))
1602475690631:(def n 156)
1602475724312:(map #(int (/ n %)) (powers-of-10))
1602475746686:(take 5 (map #(int (/ n %)) (powers-of-10)))
1602475757417:(def n 1564314)
1602475758835:(take 5 (map #(int (/ n %)) (powers-of-10)))
1602475804802:(zero? 10)
1602475807410:(zero? 0)
1602475817802:(take-while zero? (map #(int (/ n %)) (powers-of-10)))
1602475885736:(take-while (partial not zero?)  (map #(int (/ n %)) (powers-of-10)))
1602475904541:(not (zero? 0))
1602475906713:(not (zero? 2))
1602475922667:(take-while (partial not (zero?))  (map #(int (/ n %)) (powers-of-10)))
1602475937978:(take-while (partial not (partial zero?))  (map #(int (/ n %)) (powers-of-10)))
1602476005722:(take-while (partial not #(zero? %))  (map #(int (/ n %)) (powers-of-10)))
1602476046290:(take-while #(not zero? %)  (map #(int (/ n %)) (powers-of-10)))
1602476059122:(take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))
1602476295328:n
1602476339714:'(10 10)
1602476403783:(take-while #(not (zero? %)) (map #(mod n %) (powers-of-10)))
1602476428155:(take-while #(not (= n)) (map #(mod n %) (powers-of-10)))
1602476440522:(take-while #(not (= n %)) (map #(mod n %) (powers-of-10)))
1602476749131:(defn powers-of-10 \n	([] (powers-of-10 1))\n	([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (concat\n    (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n    (take-while #(not (= n %)) (map #(mod n %) (powers-of-10)))\n    '(n)))
1602476756167:(num-set 156)
1602476904268:(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))
1602476908295:(num-set 156)
1602476920959:(num-set 1568)
1602476926300:(num-set 1568432)
1602477643200:(defn is-prime? [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))\n\n(defn prime-num-set? [n]\n  (= (count (remove is_prime? (num-set n))) 0))
1602477653511:(defn is-prime? [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))
1602477668596:(defn prime-num-set? [n]\n  (= (count (remove is_prime? (num-set n))) 0))
1602477680432:(defn prime-num-set? [n]\n  (= (count (remove is-prime? (num-set n))) 0))
1602477700835:(prime-num-set? 3793)
1602477703304:(prime-num-set? 3797)
1602477706901:(prime-num-set? 3796)
1602477791630:(defn prime-num-set? [n]\n  (= (count (remove is-prime? (num-set n))) 0))
1602477803668:(defn all-prime-set\n  (filter prime-num-set? (range 2 9999999999)))
1602477833500:(prime-num-set? 9)
1602477835485:(prime-num-set? 1)
1602477838120:(prime-num-set? 2)
1602477840023:(prime-num-set? 3)
1602477842518:(prime-num-set? 4)
1602477861294:(range 1 10000)
1602477875667:(filter prime-num-set? (range 1 10000))
1602477883858:(filter prime-num-set? (range 1 100000000))
1602477947404:(defn all-prime-set\n  (filter prime-num-set? (range 1 10000)))
1602477958427:(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))\n\n(defn is-prime? [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))\n\n(defn prime-num-set? [n]\n  (= (count (remove is-prime? (num-set n))) 0))\n\n(defn all-prime-set\n  (filter prime-num-set? (range 1 10000)))
1602477995210:(defn all-prime-set []\n  (filter prime-num-set? (range 1 10000)))
1602478000846:(all-prime-set)
1602478007098:(count (all-prime-set))
1602478054552:(defn all-prime-set []\n  (filter prime-num-set? (range 1 10000)))
1602478059632:(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602478150843:(is-prime? 1)
1602478190239:(defn is-prime? [n]\n  (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 1\n               (inc (int (Math/sqrt n))))))\n     1))
1602478193614:(is-prime? 1)
1602479280716:(defn root-1 [x]\n    (inc (long (Math/sqrt x))))\n\n(defn range-1 [x]\n  (range 2 (root-1 x)))
1602479288455:(defn filter-1 [x]\n  (filter #(zero? (rem x %))\n        (range-1 x)))
1602479296008:(defn is-prime [x]\n  (nil? (first (filter-1 x))))
1602479303500:(is-prime 10)
1602479306280:(is-prime 7)
1602479308562:(is-prime 1)
1602479442967:true
1602479448568:true and false
1602479510414:(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0))
1602479513487:(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0)))
1602479528260:(is-prime? 1)
1602479530405:(is-prime? 2)
1602479532594:(is-prime? 4)
1602479534904:(is-prime? 3)
1602479537039:(is-prime? 7)
1602479570572:(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602479577110:(all-prime-set)
1602479584318:(count (all-prime-set))
1602479590490:(defn all-prime-set []\n  (filter prime-num-set? (range 10 100000)))
1602479592769:(count (all-prime-set))
1602479604963:(defn all-prime-set []\n  (filter prime-num-set? (range 10 1000000)))
1602479607691:(count (all-prime-set))
1602480084512:(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))\n\n(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0)))\n\n(def is-prime-m?\n  (memoize is-prime?))\n\n(defn prime-num-set? [n]\n  (= (count (remove is-prime? (num-set n))) 0))\n\n(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602480092530:(is-prime-m? 10)
1602480095532:(is-prime-m? 7)
1602480097596:(is-prime-m? 1)
1602480102423:(is-prime-m? 7)
1602480129180:(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))\n\n(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0)))\n\n(def is-prime-m?\n  (memoize is-prime?))\n\n(defn prime-num-set? [n]\n  (= (count (remove is-prime? (num-set n))) 0))\n\n(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602480139735:(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602480143782:(all-prime-set)
1602480151139:(count (all-prime-set))
1602480158210:(defn all-prime-set []\n  (filter prime-num-set? (range 10 100000)))
1602480160912:(count (all-prime-set))
1602480170361:(defn all-prime-set []\n  (filter prime-num-set? (range 10 1000000)))
1602480176136:(count (all-prime-set))
1602480228859:(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))\n\n(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0)))\n\n(def is-prime-m?\n  (memoize is-prime?))\n\n(defn prime-num-set? [n]\n  (= (count (remove is-prime-m? (num-set n))) 0))\n\n(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602480236644:(all-prime-set)
1602480276290:(defn all-prime-set []\n  (filter prime-num-set? (range 10 300000)))
1602480279556:(all-prime-set)
1602480316609:(defn all-prime-set []\n  (filter prime-num-set? (range 300000 500000)))
1602480319299:(all-prime-set)
1602480350663:(defn all-prime-set []\n  (filter prime-num-set? (range 500000 800000)))
1602480353140:(all-prime-set)
1602480411560:(defn all-prime-set []\n  (filter prime-num-set? (range 0 1000000)))
1602480414226:(all-prime-set)
1602481270740:(+ '())
1602481273904:(+ '(1 3))
1602481316194:(reduce + '(1 3))
1602481527742:(defn powers-of-10\n  ([] (powers-of-10 1))\n  ([n] (lazy-seq (cons (* n 10) (powers-of-10 (* n 10))))))\n\n(defn num-set [n]\n  (cons n (concat\n            (take-while #(not (zero? %))  (map #(int (/ n %)) (powers-of-10)))\n            (take-while #(not (= n %)) (map #(mod n %) (powers-of-10))))))\n\n(defn is-prime? [n]\n  (and (not= n 1) (= (count\n       (filter\n         #(= (mod n %) 0)\n         (range 2\n               (inc (int (Math/sqrt n))))))\n     0)))\n\n(def is-prime-m?\n  (memoize is-prime?))\n\n(defn prime-num-set? [n]\n  (nil? (first (remove is-prime-m? (num-set n)))))\n\n(defn all-prime-set []\n  (filter prime-num-set? (range 10 10000)))
1602481535371:(all-prime-set)
